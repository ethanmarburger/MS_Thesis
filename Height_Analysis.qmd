---
title: "Height Data Analysis"
format: html
editor: visual
---

# Analysis info

Looking at differences in soybean height based on Treatment (0:control or 1:tannins) over time. We included WAT (Week after application) as an additional predictor variable and Plot and Field as nested random effects.

Response Variable: 

- Height (cm)

Predictor Variables:

- Treatment (0: Control, 1: Tannins)
- WAT (Week After Application: 1-4)
- Plot (1-20)
- Field (1-20)

Below is our process of fitting our data to the best possible model.

# Initial Height Analysis

## Loading and Sub setting Data

```{r}
#| echo: true
#| include: false
library(tidyverse)
library(lmerTest)
library(glmmTMB)
library(ggplot2)
library(lattice)
library(nlme)
```

### Reading in Data Source

```{r}
# Read the data
data <- read.csv("Data.csv", header=TRUE)
```

**Sub setting data to:**

**1) Only include values from plants that are exposed to browsing as opposed to those completely protected from browsing.**

**2) Convert predictor variables to factors with "levels".**

**3) Remove rows with missing values (missing values = dead plant or sampling error).**

```{r}
# Subset to remove Enclosure values
data <- data[data$Enclosure == "0", ]

# Convert categorical variables to factors
data$Field <- as.factor(data$Field)
data$Plot <- as.factor(data$Plot)
data$Treatment <- as.factor(data$Treatment)
data$Enclosure <- as.factor(data$Enclosure)
data$WAT <- as.factor(data$WAT)

# Remove rows with missing Height values
data <- data |>
  filter(!is.na(Height))
```

## Exploratory Data Analysis

**Calculating and Displaying mean soybean height for treatments across Weeks after application.**

```{r}
# Calculate mean Height for each Treatment and WAT combination
summary_data <- data |>
  group_by(Treatment, WAT) |>
  summarise(mean_height = mean(Height, na.rm = TRUE))

# Subset to remove WAT values at week zero
summary_data <- summary_data[summary_data$WAT != "0", ]

# Displaying mean soybean height for treatments across Weeks after application
print(summary_data)
```

## Plotting "Mean Height by Treatment Over Time"

```{r}
#| echo: false
# Create a plot
ggplot(summary_data, aes(x = WAT, y = mean_height, color = factor(Treatment), group = Treatment)) +
  geom_line(linewidth = 1) +  # Adjust line width for better visibility
  geom_point(size = 3) +  # Make points larger for clarity
  labs(
    title = "Mean Height by Treatment Over Time",
    x = "Weeks After Treatment",
    y = "Mean Height",
    color = "Treatment"  # Add a legend title
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", size = 14),  # Center and style title
    axis.text = element_text(size = 12),  # Adjust axis text size
    axis.title = element_text(size = 13),  # Adjust axis title size
    legend.title = element_text(size = 12),  # Adjust legend title size
    legend.text = element_text(size = 11)  # Adjust legend text size
  )

```

## Box plot's showing the distribution of height over time.

```{r}
#| echo: false
# Box plot with centered, larger title and two legends: one for Treatment and one for WAT
ggplot(data, aes(x = Treatment, y = Height, fill = Treatment)) +
  geom_boxplot() +
  facet_wrap(~ WAT, nrow = 1) +  # Facet in a single row
  labs(title = "Height Distribution by Treatment over Time",
       x = "Treatment",
       y = "Height") +
  # Create a dummy aesthetic for WAT to generate a second legend
  geom_point(aes(color = factor(WAT)), alpha = 0) +  # Invisible points to create the WAT legend
  scale_color_discrete(name = "Weeks After Treatment") +  # Legend for WAT
  theme(
    legend.position = "right",
    plot.title = element_text(hjust = 0.5, size = 14)  # Center title and increase font size by 2 points (default is ~12)
  )
```

## Removing Height Data from Week Zero

**Measurements from week zero were taken as a baseline to show differences in height after tannins were applied. It should be excluded from analysis as measurements were taken before application of tannins and biases the results.**

```{r}
# Subset to remove Height values at week zero
data_subset <- data[data$WAT != "0", ]
```

### Plotting subset data

```{r}
ggplot(data_subset, aes(x = factor(Treatment, levels = c(0, 1), labels = c("0%", "10%")), y = Height, fill = factor(Treatment, labels = c("0%", "10%")))) +
  geom_boxplot() +
  facet_wrap(~ WAT, nrow = 1) +  # Facet in a single row
  labs(
    x = "Tannin Concentration",
    y = "Soybean Height (cm)",
    fill = "Tannin Concentration"  # Update legend title
  ) +
  # Create a dummy aesthetic for WAT to generate a second legend
  geom_point(aes(color = factor(WAT)), alpha = 0) +  # Invisible points to create the WAT legend
  scale_color_discrete(name = "Weeks After Treatment") +  # Legend for WAT
  theme(
    legend.position = "top",
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),  # Center title and bold it
    plot.margin = margin(t = 20, b = 20, l = 20, r = 20),  # Increase space between the figure and the edges
    axis.text.x = element_text(size = 12)  # Adjust x-axis text size if necessary
  )

```

## Simple Analysis

**Fitting models for simple linear Regression**

```{r}
# Linear Regression for Height

# Null Model
lm_height_1 <- lm(formula = Height ~ Treatment, data = data_subset)

# Partial Model
lm_height_2 <- lm(formula = Height ~ Treatment * WAT, data = data_subset)

# Full Model
lm_height_3 <- lm(formula = Height ~ Treatment * WAT * Field, data = data_subset)
```

**Choosing the best model**

```{r}
#ANOVA for differences in models 
anova(lm_height_1, lm_height_2, lm_height_3)

# AIC to pick the best model
AIC(lm_height_1, lm_height_2, lm_height_3)
```

**Model lm_height_3 has the lowest AIC score.**

```{r}
summary(lm_height_3)
```

**The Interaction between Treatment1 (Tannin application) and WAT (Week after Treatment) is significant at alpha = 0.05**

## Checking Model Assumptions

Using a QQ plot to look for non-normal distributions of the model's plotted residuals

```{r}
plot(lm_height_3)
```

**Looking at the plotted Q-Q Residuals, data does appear to be slightly non-normal. With the size of out data set, non-normality is probably fine**

**Also, I don't believe that simple linear regression is appropriate model for out data. Because of the three fields design plan, we should switch the variable Field to a random factor to block the data.**

**A better fitting model will provide more accurate results.**

**Removal of outliers 1292, 1205, and 1314 may improve model fit. I'm unsure if this is correct because I only have 1166 observations in my dataset?**

# Continued Analysis with Model Adjustments

## Removing outliers

```{r}
# Does nothing because there are no corresponding values 
data_subset <- data_subset[-c(1205, 1292, 1314), ]
```

## Mixed Effects Model

```{r}
# Mixed-Effects Model for Height

# Null Model
mem_h_1 <- glmmTMB(Height ~ Treatment, data = data_subset)

# Partial Model 1
mem_h_2 <- glmmTMB(Height ~ Treatment * WAT, data = data_subset)

# Partial Model 2
mem_h_3 <- glmmTMB(Height ~ Treatment * WAT * Field, data = data_subset)

# Full Model with random effects for Field
mem_h_4 <- glmmTMB(Height ~ Treatment * WAT + (1 | Field), data = data_subset)

# Full Model with random effects for Field/Plot
mem_h_5 <- glmmTMB(Height ~ Treatment * WAT + (1 | Plot) + (1 | Field), data = data_subset)
```

## Model Comparison using ANOVA

```{r}
# Compare models using likelihood ratio test
anova(mem_h_1, mem_h_2, mem_h_3, mem_h_4, mem_h_5)
```

## Model comparison using AIC

```{r}
# AIC comparison
AIC(mem_h_1, mem_h_2, mem_h_3, mem_h_4, mem_h_5)
```

## Model comparison using BIC

```{r}
# BIC comparison
BIC(mem_h_1, mem_h_2, mem_h_3, mem_h_4, mem_h_5)
```

## Summary of best fitted model!

```{r}
# Full model with nested random effects
summary(mem_h_5)
```

**Best Fitted Model is the full model with nested random effects**

## Model Diagnostics

### Extracting model residuals

```{r}
# Extract residuals
residuals <- resid(mem_h_5)
fitted <- fitted(mem_h_5)

# Plot residuals vs fitted values
plot(fitted, residuals, xlab = "Fitted values", ylab = "Residuals",
     main = "Residuals vs Fitted")
abline(h = 0, col = "red")
```

**Plotted Model Residuals vs Fitted Residuals deviation from a straight line indicates departure from normality assumption.**

**This invalidates our model results.**

### Normality in Residuals

```{r}
qqnorm(residuals)
qqline(residuals, col = "red")
```

**Deviation of Quantiles from a straight line at the ends indicate outliers.**

**A log transformation may better fit the data to out model and allow our data to meet our models normality assumption.**

# Response variable log transformation and further analysis

## Mixed Effects Model with Log transformation

```{r}
# Fit the mixed-effects model with log transformation on best model
mem_h_log <- glmmTMB(log(Height) ~ Treatment * WAT + (1 | Plot) + (1 | Field), data = data_subset)
```

## AIC comparison between log and non-log model

```{r}
AIC(mem_h_5, mem_h_log)
```

## BIC comparison

```{r}
BIC(mem_h_5, mem_h_log)
```

**Log transformed model has drastically lower AIC and BIC.**

## Summary of Best fitting model

```{r}
summary(mem_h_log)
```

**No model significance between treatment with tannin and height variable, but a positive influence.**

**Statistical Significance for Week After Treatment. This is to be expected during these growth stages**

**No model significance between tannin treatment and Week After Application, but a positive influence.**

## Log Transformed Model Diagnostics

### Extracting model residuals

```{r}
residuals_log <- resid(mem_h_log)
fitted_log <- fitted(mem_h_log)

# Plot residuals vs fitted values
plot(fitted_log, residuals_log, xlab = "Fitted values", ylab = "Residuals",
     main = "Residuals vs Fitted")
abline(h = 0, col = "red")
```

**Log Transformation fixed normality assumption.**

### Normality in Residuals

```{r}
qqnorm(residuals_log)
qqline(residuals_log, col = "red")
```

**Quantiles from log transformation don't fit the QQ line as well but the drastically lower AIC score indicates better model fit.**

## Incorporating binary variable to account for added plants after week 2

```{r}
data_subset$num_plants_change <- ifelse(data_subset$WAT >= 2, 1, 0)  
```

### Rerunning best model with binary variable

```{r}
mem_log_adjusted <- glmmTMB(log(Height) ~ Treatment * WAT + num_plants_change + (1 | Plot) + (1 | Field), data = data_subset)
```

### Model Diagnostics

```{r}
AIC(mem_log_adjusted)
```

AIC with of model with binary variable is slightly lower then without (\~2 points lower)

```{r}
summary(mem_log_adjusted)
```

## Model Diagnostics

### Extracting model residuals

```{r}
residuals_adj <- resid(mem_log_adjusted)
fitted_adj <- fitted(mem_log_adjusted)

# Plot residuals vs fitted values
plot(fitted_adj, residuals_adj, xlab = "Fitted values", ylab = "Residuals",
     main = "Residuals vs Fitted")
abline(h = 0, col = "red")
```

### Normality in Residuals

```{r}
qqnorm(residuals_adj)
qqline(residuals_adj, col = "red")
```

## Continuing analysis for other response variables

### [Click here for analysis comparing soybean heights between plant protected from deer browsing and those exposed to browsing](enclosure_data.html)
